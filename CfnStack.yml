Parameters:
  Cidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: CidrBlock for VPC
  Cidr2:
    Type: String
    Default: '172.16.0.0/16'
    Description: CidrBlock for VPC
  AVZone1:
    Type: AWS::EC2::AvailabilityZone::Name

  AVZone2:
    Type: AWS::EC2::AvailabilityZone::Name

  LTMdesc:
    Type: String
    Description: 'Version Description'
  Instance:
    Type: String
    Default: 't2.micro'
    Description: Instance type - look art allowed values
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName


  Name:
    Type: String
    Description: Enter name for S3 bucket"

  DomainName:
    Type: String
    Description: "domain name"
  
  Profile:
    Type: String
    Default: 'arn:aws:iam::637423383654:instance-profile/LabInstanceProfile' 


  Image:
    Type: String
    Default: 'ami-06148fefa3b16c86c'
  
  LTP1:
    Type: String
    Description: "name for first launchtemplate"


  DBName:
    Type: String
    Description: 'Name for the RDS database'
  MasterUsername:
    Type: String
    Description: 'Master username for the RDS instance'
  MasterUserPassword:
    Type: String
    Description: 'Master user password for the RDS instance'
  publicAccess:
    Type: String
    Default: false
    AllowedValues: 
      - true 
      - false
    Description: 'Enable Public Access'
  EnableMultiAZ:
    Type: String
    Default: false
    AllowedValues: 
      - true 
      - false
    Description: 'enable multi-AZ deployment'




Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Cidr
      EnableDnsSupport: true
      EnableDnsHostnames: true 

  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Cidr2
      EnableDnsSupport: true
      EnableDnsHostnames: true 

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  InternetGateway2:
    Type: AWS::EC2::InternetGateway


  AttachGateway2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC2
      InternetGatewayId: !Ref InternetGateway2


  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway




  AtoB: 
    Type: AWS::EC2::Route
    DependsOn: VPCPeering
    Properties: 
      DestinationCidrBlock: 172.16.0.0/16
      RouteTableId: !Ref PrivateRouteTable
      VpcPeeringConnectionId: !Ref VPCPeering

  BtoA: 
    Type: AWS::EC2::Route
    DependsOn: VPCPeering
    Properties: 
      DestinationCidrBlock: 10.0.0.0/16
      RouteTableId: !Ref PublicRouteTable2
      VpcPeeringConnectionId: !Ref VPCPeering



  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2


  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteInternetGateway2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway2
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway2

  RouteInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  loadbalancerRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref loadbalancerSubnet


  loadbalancerRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref loadbalancerSubnet2


  NatGateWayEIP:
   Type: AWS::EC2::EIP

  PrivateRouteTable:
   Type: AWS::EC2::RouteTable
   Properties:
      VpcId: !Ref VPC


  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGateWayEIP.AllocationId
      SubnetId: !Ref loadbalancerSubnet



  RouteNatGateway:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway


  PeeredPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: "172.16.2.0/24"
      AvailabilityZone: !Ref AVZone1
      MapPublicIpOnLaunch: true


  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Ref AVZone1
      
      

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Ref AVZone2

  loadbalancerSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.8.0/24"
      AvailabilityZone: !Ref AVZone1
      MapPublicIpOnLaunch: true
  
  loadbalancerSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.6.0/24"
      AvailabilityZone: !Ref AVZone2
      MapPublicIpOnLaunch: true



      

  peeredSubnetRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PeeredPublicSubnet1
      

  SubnetRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PublicSubnet1

  SubnetRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PublicSubnet2

  HTTP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VPC"
      GroupDescription: "Allow HTTP traffic"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          
  
  
  NFS:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref "VPC"
      GroupDescription: "Allow NFS connection"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 10.0.0.0/16

  SSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VPC"
      GroupDescription: "Allow SSH Connection"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 172.16.0.0/16

  RDSSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VPC"
      GroupDescription: "allow RDS connection"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16

  RDP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VPC2"
      GroupDescription: "RDP connection"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0



  peeredSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VPC2"
      GroupDescription: "Allow SSH Connection"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0


  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Ref LTP1
      VersionDescription: !Ref LTMdesc
      LaunchTemplateData:
        ImageId: !Ref Image
        InstanceType: !Ref Instance
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !Ref Profile
        SecurityGroupIds:
          - !GetAtt HTTP.GroupId
          - !GetAtt SSH.GroupId
          - !GetAtt NFS.GroupId
          - !GetAtt RDSSSG.GroupId
          
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash

            touch itworkss.txt
            sudo rm /var/www/html/valid.txt

            sudo apt update
            sudo apt-get upgrade
            sudo apt-get install unzip lsb-release apt-transport-https ca-certificates software-properties-common -y
            sudo LC_ALL=C.UTF-8 sudo add-apt-repository ppa:ondrej/php 
            sudo apt update
            sudo apt install php7.4 php7.4-{cli,zip,mysql,bz2,curl,mbstring,intl,common} -y
            sudo apt install mysql-server
            sudo apt install apache2

            sudo apt-get install awscli -y
            sudo apt install nfs-common -y
            sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport $(aws ssm get-parameter --name "/deploy/fsid" --region us-east-1 --query "Parameter.Value" --output text):/ /var/www/html
            aws s3 cp s3://$(aws ssm get-parameter --name "S3" --query "Parameter.Value" --output text)/mount.sh 

            



           
            






  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: LaunchTemplate
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 3
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref MyTargetGroup




  Loadbalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Subnets: 
        - !Ref loadbalancerSubnet
        - !Ref loadbalancerSubnet2
      
      SecurityGroups: 
        - !Ref HTTP
      Scheme: internet-facing

      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: MyALB

      


  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2


  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref Loadbalancer
      Port: 80
      Protocol: HTTP

  MyListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref MyListener
      Priority: 1



  

  S3:
    Type: AWS::S3::Bucket 
    Properties:
      BucketName: !Ref Name



  MyEFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: MyEFSFileSystem

  MyEFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref MyEFSFileSystem
      SubnetId: !Ref PublicSubnet1

      SecurityGroups: 
        - !GetAtt NFS.GroupId
  
  MyEFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref MyEFSFileSystem
      SubnetId: !Ref PublicSubnet2
      SecurityGroups: 
        - !GetAtt NFS.GroupId

  S3Param:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/S3"
      Type: String
      Value: !Sub s3://${Name} 

  
  MyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/deploy/fsid"
      Type: String
      Value: 
        Fn::Sub:
          - "${FileSystemId}.efs.${Region}.amazonaws.com"
          - FileSystemId: !Ref MyEFSFileSystem
            Region: !Ref AWS::Region


  AMI:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/deploy/ami"
      Type: String
      Value: !Ref Image
        
      


  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: 'true'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html


  VPCPeering:
    Type: AWS::EC2::VPCPeeringConnection
    Properties: 
      VpcId: !Ref VPC
      PeerVpcId: !Ref VPC2
  

  PeeredEc2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-057827f01a0d6db1f
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      IamInstanceProfile: 'LabInstanceProfile'
      SecurityGroupIds:
        - !Ref peeredSSH
        - !Ref RDP 
      SubnetId: !Ref PeeredPublicSubnet1 	

  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: "RDSSg"
      DBSubnetGroupDescription: "DB Subnet Group"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2


  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: mysql
      EngineVersion: '5.7'
      PubliclyAccessible: !Ref publicAccess
      MultiAZ: !Ref EnableMultiAZ
      VPCSecurityGroups:
        - !GetAtt RDSSSG.GroupId
      

  ReadReplicaDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      
      SourceDBInstanceIdentifier: !Ref RDS
      DBInstanceIdentifier: !Sub '${AWS::StackName}-ReadReplica'
      DBInstanceClass: db.t2.micro

  
  Endpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/dbtask/dbEndpointMaster"
      Type: String
      Value: !GetAtt RDS.Endpoint.Address
      Description: "RDS endpoint"

  


  ReadReplicaEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/dbtask/dbEndpointReadReplica"
      Type: String
      Value: !GetAtt ReadReplicaDBInstance.Endpoint.Address
      Description: "RDS read replica endpoint"




  DBNameparams:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/dbtask/dbName"
      Type: String
      Value: !Ref DBName
      Description: "RDS read replica endpoint"

  DBUser:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/dbtask/dbUser"
      Type: String
      Value: !Ref MasterUsername
      Description: "RDS read replica endpoint"

  DBPassword:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/dbtask/dbpassword"
      Type: String
      Value: !Ref MasterUserPassword
      Description: "RDS read replica endpoint"

Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref VPC
    Export:
      Name: VPCId

  VPC2Id:
    Description: "Second VPC ID"
    Value: !Ref VPC2
    Export:
      Name: VPC2Id


  LoadBalancerDNSName:
    Description: "DNS Name of the Load Balancer"
    Value: !GetAtt Loadbalancer.DNSName
    Export:
      Name: LoadBalancerDNSName


  S3BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref S3
    Export:
      Name: S3BucketName

  EFSMountTargetId:
    Description: "EFS Mount Target ID"
    Value: !Ref MyEFSMountTarget
    Export:
      Name: EFSMountTargetId

  EFSMountTarget2Id:
    Description: "EFS Mount Target 2 ID"
    Value: !Ref MyEFSMountTarget2
    Export:
      Name: EFSMountTarget2Id

  PeeredVPCConnectionId:
    Description: "VPC Peering Connection ID"
    Value: !Ref VPCPeering
    Export:
      Name: PeeredVPCConnectionId

  RDSInstanceEndpoint:
    Description: "RDS Instance Endpoint"
    Value: !GetAtt RDS.Endpoint.Address
    Export:
      Name: RDSInstanceEndpoint

  ReadReplicaEndpoint:
    Description: "Read Replica Endpoint"
    Value: !GetAtt ReadReplicaDBInstance.Endpoint.Address
    Export:
      Name: ReadReplicaEndpoint

  MasterUsername:
    Description: "RDS Master Username"
    Value: !Ref MasterUsername
    Export:
      Name: MasterUsername

  MasterUserPassword:
    Description: "RDS Master User Password"
    Value: !Ref MasterUserPassword
    Export:
      Name: MasterUserPassword











          

  










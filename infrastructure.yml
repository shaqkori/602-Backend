# template logic:
# vpc - 2 AV zones - 4 subnets - 2 for frontend containers - 2 for backend containers - load balncer and auto scaling group on both
# ECR deifined and images pushed to them through github actions
# ECS Communicates with each other throgh VPC endpoints
# Backend ECS communicates to api gateway to invoke lambda function to connect to dynamo db
# frontend ECS is accessed from the load balancer DNS the connected to backednt trough api calls

# NAT gateway -> Internet Gateway  -> Internet

AWSTemplateFormatVersion: "2010-09-09"
Description: Secure full-stack application with private subnets, NAT, API Gateway, and Lambda

Parameters:
  AZ1:
    Type: AWS::EC2::AvailabilityZone::Name

  AZ2:
    Type: AWS::EC2::AvailabilityZone::Name

  Cidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: Enter the CIDR block for the vpc

  RepoName:
    Type: String
    Description: Enter repository name

  Role:
    Type: String
    Default: "arn:aws:iam::147166433174:role/LabRole"
    Description: IAM role

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Cidr
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # frontend subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ1
      CidrBlock: 10.0.1.0/24

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ2
      CidrBlock: 10.0.2.0/24

  # bakcend subnets
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ1
      CidrBlock: 10.0.5.0/24

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ2
      CidrBlock: 10.0.6.0/24

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ1
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ2
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: true

  #Internet/NAT gateway routes

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatGateWayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGateway

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateWayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  #Route Tabless -> Creates routes then attatch them to the route tables

  RouteInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteNatGateway:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  BackendRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # security Groups
  HTTP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Frontend Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  BackendSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Backend Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref HTTP

  # load balancer
  Loadbalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

      SecurityGroups:
        - !Ref HTTP
      Scheme: internet-facing

      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Tags:
        - Key: Name
          Value: MyALB

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref Loadbalancer
      Port: 80
      Protocol: HTTP

  MyListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref MyListener
      Priority: 1

  #VPC endpoints

  APIGatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.execute-api"
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      SubnetIds: [!Ref PrivateSubnet3, !Ref PrivateSubnet4]
      SecurityGroupIds: [!Ref BackendSG]
      PrivateDnsEnabled: true

  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcId: !Ref VPC
      RouteTableIds: [!Ref BackendRouteTable]

  ECSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecs"
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet4]

  # ECR

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref RepoName
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  #containers

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MainCluster

  # Frontend Service
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref Role
      Family: frontend
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
        - Name: frontend
          Image: !Sub "${ECRRepository.RepositoryUri}:latest"
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: BACKEND_URL
              Value: "http://backend.internal:3000"

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: MyListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      TaskDefinition: !Ref FrontendTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
          AssignPublicIp: DISABLED
      LoadBalancers:
        - TargetGroupArn: !Ref MyTargetGroup
          ContainerName: frontend
          ContainerPort: 80

  # Backend Service
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: backend
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref Role
      RequiresCompatibilities: [FARGATE]
      Cpu: 512
      Memory: 1024
      ContainerDefinitions:
        - Name: backend
          Image: !Sub "${ECRRepository.RepositoryUri}:latest"
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: API_ENDPOINT
              Value: !Sub "https://${DataAPI}.execute-api.${AWS::Region}.amazonaws.com/data"

  BackendService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      TaskDefinition: !Ref BackendTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PrivateSubnet3, !Ref PrivateSubnet4]
          AssignPublicIp: DISABLED

  # api gateway invokes lambda to connect to dynamodb functionality

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AppData
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  DataProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DataProcessor
      Runtime: python3.9
      Handler: index.handler
      Role: !Ref Role
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          dynamodb = boto3.resource('dynamodb')
          table_name = os.environ['TABLE_NAME']
          table = dynamodb.Table(table_name)

          def handler(event, context):
              # Handle GET request to fetch all items
              if event['httpMethod'] == 'GET':
                  try:
                      response = table.scan()
                      return {
                          'statusCode': 200,
                          'headers': {'Content-Type': 'application/json'},
                          'body': json.dumps(response.get('Items', []))
                      }
                  except Exception as e:
                      return {
                          'statusCode': 500,
                          'body': json.dumps({'error': str(e)})
                      }
              
              # Handle POST request to add new items
              elif event['httpMethod'] == 'POST':
                  try:
                      data = json.loads(event['body'])
                      table.put_item(Item=data)
                      return {
                          'statusCode': 200,
                          'body': json.dumps({'message': 'Item added successfully'})
                      }
                  except Exception as e:
                      return {
                          'statusCode': 500,
                          'body': json.dumps({'error': str(e)})
                      }
              
              return {
                  'statusCode': 400,
                  'body': json.dumps({'error': 'Unsupported method'})
              }
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
      VpcConfig:
        SecurityGroupIds:
          - !Ref BackendSG
        SubnetIds:
          - !Ref PrivateSubnet3
          - !Ref PrivateSubnet4

  # API Gateway
  DataAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: DataAPI
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: ["*"]
        AllowMethods: ["GET", "POST"]

  LambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref DataAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DataProcessorLambda.Arn}/invocations"
      PayloadFormatVersion: 1.0

  # GET Route to fetch data
  DataAPIGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref DataAPI
      RouteKey: "GET /data"
      Target: !Sub "integrations/${LambdaIntegration}"

  # POST Route to add data
  DataAPIPostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref DataAPI
      RouteKey: "POST /data"
      Target: !Sub "integrations/${LambdaIntegration}"

  LambdaAPIGWPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DataProcessorLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DataAPI}/*"

Outputs:
  ALB:
    Value: !GetAtt Loadbalancer.DNSName

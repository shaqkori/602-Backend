AWSTemplateFormatVersion: "2010-09-09"
Description: Secure full-stack application with private subnets, NAT, API Gateway, and Lambda

Parameters:
  AZ1:
    Type: AWS::EC2::AvailabilityZone::Name

  AZ2:
    Type: AWS::EC2::AvailabilityZone::Name

  Cidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: Enter the CIDR block for the vpc

  RepoName:
    Type: String
    Description: Enter repository name

  Role:
    Type: String
    Default: "arn:aws:iam::147166433174:role/LabRole"
    Description: IAM role

  Profile:
    Type: String
    Default: "arn:aws:iam::147166433174:instance-profile/LabInstanceProfile"

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName

  CognitoUserPoolId:
    Type: String
    Default: us-east-1_AbcD1234
    Description: "The ID of the Cognito User Pool (e.g., us-east-1_AbcD1234)"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Cidr
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # frontend subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ1
      CidrBlock: 10.0.1.0/24

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ2
      CidrBlock: 10.0.2.0/24

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ1
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ2
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatGateWayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGateway

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateWayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  RouteInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteNatGateway:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  HTTP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Frontend Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  SSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ssh
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  BackendSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Backend Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref HTTP

  EC2LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0c614dee691cbbf37
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroups: [!Ref HTTP, !Ref SSH]
      IamInstanceProfile: !Ref Profile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          start ecs

  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref EC2LaunchConfig
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      VPCZoneIdentifier: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      Tags:
        - Key: Name
          Value: ECS-Instance
          PropagateAtLaunch: true

  Loadbalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

      SecurityGroups:
        - !Ref HTTP
      Scheme: internet-facing

      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Tags:
        - Key: Name
          Value: MyALB

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref Loadbalancer
      Port: 80
      Protocol: HTTP

  MyListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref MyListener
      Priority: 1

  APIGatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.execute-api"
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      SecurityGroupIds: [!Ref BackendSG]
      PrivateDnsEnabled: true

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref RepoName
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MainCluster

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: fullstack-app
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: app
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest
          Cpu: 512
          Memory: 1024
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          Environment:
            - Name: API_ENDPOINT
              Value: !Sub "https://${DataAPI}.execute-api.${AWS::Region}.amazonaws.com/data"

  BackendService:
    Type: AWS::ECS::Service
    DependsOn: MyListener
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 80
          TargetGroupArn: !Ref MyTargetGroup

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: testTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Cognito Authorizer
  MyCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: "CognitoAuthorizer"
      Type: "COGNITO_USER_POOLS"
      IdentitySource: "method.request.header.Authorization"
      RestApiId: !Ref MyApiGateway
      ProviderARNs:
        - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
  # API Gateway
  DataAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "MyGraphQLAPI"
      Description: "GraphQL API for my mobile app"

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: GraphqlMethod
    Properties:
      RestApiId: !Ref DataAPI

  GraphqlResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt DataAPI.RootResourceId
      RestApiId: !Ref DataAPI
      PathPart: "graphql"

  GraphqlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: "COGNITO_USER_POOLS"
      HttpMethod: "POST"
      ResourceId: !Ref GraphqlResource
      RestApiId: !Ref DataAPI
      Integration:
        Type: "HTTP"
        IntegrationHttpMethod: "POST"
        Uri: !Sub "https://${Loadbalancer.DNSName}/graphql"

  ApiGatewayUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/test/apiGatewayUrl"
      Value: !Sub "https://${DataAPI}.execute-api.${AWS::Region}.amazonaws.com"
      Type: String
      Overwrite: true

Outputs:
  ALBDNS:
    Description: "ALB DNS Name"
    Value: !GetAtt Loadbalancer.DNSName

  APIGatewayInvokeURL:
    Description: "API Gateway Invoke URL"
    Value: !Sub "https://${DataAPI}.execute-api.${AWS::Region}.amazonaws.com"

# template logic:
# vpc - 2 AV zones - 4 subnets - 2 for frontend containers - 2 for backend containers - load balncer and auto scaling group on both
# ECR deifined and images pushed to them through github actions
# ECS Communicates with each other throgh VPC endpoints
# Backend ECS communicates to api gateway to invoke lambda function to connect to dynamo db
# frontend ECS is accessed from the load balancer DNS the connected to backednt trough api calls

#scratch the ecs endpoint for connection - just connect the subnets to the nat gateway and they can communicate use the vpc endpoints for api gatewat and dynamodb
# alternative - use instances instead of fargate

# no need for frontend container ccause frontend runs nativly on mobile app so can scratch that and display the output from the backend container

# NAT gateway -> Internet Gateway  -> Internet

# major change - instead implementing graphql api instead of rest (more suited to project requirements for application) appsync doesnt funciton in lab so hosting it on the backend server with express js then accessing webpage from s3 bucket
# ecs loadbalanced -> nat gateway -> internet
# loadbalncer url check for authorisation jwt token

#hosted on s3 bucket

# create database schema as enviroment variables in github actions then access them

# solved issue of not being able to connect through the load balancer as the instances was not listening on any port, solved by installing a websrver on the instance to listen on port 80 but should manaualy spcify to listen on a port in docker image

# image for froted and backend in one task defiition

#node js on a web app connected to a database

# User → Application Load Balancer → ECS Service (Docker Container)
#         ↓
# API Gateway → Lambda → Aurora (mysql)
#       ↑
#  Cognito Auth

AWSTemplateFormatVersion: "2010-09-09"
Description: Secure full-stack application with private subnets, NAT, API Gateway, and Lambda

Parameters:
  AZ1:
    Type: AWS::EC2::AvailabilityZone::Name

  AZ2:
    Type: AWS::EC2::AvailabilityZone::Name

  Cidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: Enter the CIDR block for the vpc

  RepoName:
    Type: String
    Description: Enter repository name

  Role:
    Type: String
    Default: "arn:aws:iam::147166433174:role/LabRole"
    Description: IAM role

  DBName:
    Type: String
    Description: "Name for the RDS database"
  MasterUsername:
    Type: String
    Description: "Master username for the RDS instance"
  MasterUserPassword:
    Type: String
    Description: "Master user password for the RDS instance"
  publicAccess:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: "Enable Public Access"
  EnableMultiAZ:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: "enable multi-AZ deployment"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Cidr
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # frontend subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ1
      CidrBlock: 10.0.1.0/24

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ2
      CidrBlock: 10.0.2.0/24

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ1
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ2
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: true

  #Internet/NAT gateway routes

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatGateWayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGateway

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateWayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  #Route Tabless -> Creates routes then attatch them to the route tables

  RouteInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteNatGateway:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  BackendRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # security Groups
  HTTP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Frontend Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  BackendSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Backend Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref HTTP

  RDSSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VPC"
      GroupDescription: "allow RDS connection"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16

  # load balancer
  Loadbalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

      SecurityGroups:
        - !Ref HTTP
      Scheme: internet-facing

      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Tags:
        - Key: Name
          Value: MyALB

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref Loadbalancer
      Port: 80
      Protocol: HTTP

  MyListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref MyListener
      Priority: 1

  #VPC endpoints

  APIGatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.execute-api"
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      SecurityGroupIds: [!Ref BackendSG]
      PrivateDnsEnabled: true

  # ECR

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref RepoName
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  #containers

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MainCluster

  # Frontend Service
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref Role
      Family: frontend
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      Cpu: 512
      Memory: 1024
      ContainerDefinitions:
        - Name: frontend
          Image: !Sub "${ECRRepository.RepositoryUri}:frontend"
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: DB_NAME
              Value: !Ref DBName
            - Name: DB_USER
              value: !Ref MasterUsername
            - value: DB_PASSWORD
              value: !Ref MasterUserPassword
            - value: DB_HOST
              value: !GetAtt RDS.Endpoint.Address
          

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: MyListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      TaskDefinition: !Ref FrontendTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
          AssignPublicIp: DISABLED
      LoadBalancers:
        - TargetGroupArn: !Ref MyTargetGroup
          ContainerName: frontend
          ContainerPort: 80

  # Backend Service

  # api gateway invokes lambda to connect to dynamodb functionality

  DataProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DataProcessor
      Runtime: python3.13
      Handler: index.handler
      Role: !Ref Role
      Code:
        S3Bucket: pymysqlshaqkori
        S3Key: package.zip

      Environment:
        Variables:
          DB_NAME: !Ref DBName
          DB_USER: !Ref MasterUsername
          DB_PASSWORD: !Ref MasterUserPassword
          DB_HOST: !GetAtt RDS.Endpoint.Address

      VpcConfig:
        SecurityGroupIds:
          - !Ref BackendSG
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_phone_number
            Priority: 1
          - Name: verified_email
            Priority: 2
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      EmailVerificationMessage: The verification code to your new account is {####}
      EmailVerificationSubject: Verify your new account
      SmsVerificationMessage: The verification code to your new account is {####}
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: The verification code to your new account is {####}
        EmailSubject: Verify your new account
        SmsMessage: The verification code to your new account is {####}
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  CogAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: CognitoAuthorizer
      ApiId: !Ref DataAPI
      AuthorizerType: JWT
      IdentitySource: ["$request.header.Authorization"]
      JwtConfiguration:
        Audience: [!Ref UserPool]
        Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"

  # API Gateway
  DataAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: DataAPI
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: ["*"]
        AllowMethods: ["GET", "POST"]

  Deployment:
    Type: "AWS::ApiGatewayV2::Deployment"
    DependsOn:
      - DataAPIGetRoute
      - DataAPIPostRoute
    Properties:
      Description: deployment
      ApiId: !Ref DataAPI

  StageName:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref DataAPI

  LambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref DataAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DataProcessorLambda.Arn}/invocations"
      PayloadFormatVersion: 1.0

  # GET Route to fetch data
  DataAPIGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref DataAPI
      RouteKey: "GET /data"
      AuthorizationType: JWT
      AuthorizerId: !Ref CogAuthorizer
      Target: !Sub "integrations/${LambdaIntegration}"

  # POST Route to add data
  DataAPIPostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref DataAPI
      RouteKey: "POST /data"
      AuthorizationType: JWT
      AuthorizerId: !Ref CogAuthorizer
      Target: !Sub "integrations/${LambdaIntegration}"

  # RDS aurora mysql

  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: mysql
      EngineVersion: "8.0.34"
      PubliclyAccessible: !Ref publicAccess
      MultiAZ: !Ref EnableMultiAZ
      VPCSecurityGroups:
        - !GetAtt RDSSSG.GroupId

  ReadReplicaDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      SourceDBInstanceIdentifier: !Ref RDS
      DBInstanceIdentifier: !Sub "${AWS::StackName}-ReadReplica"
      DBInstanceClass: db.t3.micro

  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: "RDSSg"
      DBSubnetGroupDescription: "DB Subnet Group"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  ReadReplicaEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/dbtask/dbEndpointReadReplica"
      Type: String
      Value: !GetAtt RDS.Endpoint.Address
      Description: "RDSendpoint"

  DBNameparams:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/dbtask/dbName"
      Type: String
      Value: !Ref DBName
      Description: "DBNAME"

  DBUser:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/dbtask/dbUser"
      Type: String
      Value: !Ref MasterUsername
      Description: "RDS read replica endpoint"

  DBPassword:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/dbtask/dbpassword"
      Type: String
      Value: !Ref MasterUserPassword
      Description: "RDS read replica endpoint"
  
  ApiGatewayUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/myapp/apiurl"
      Type: String
      Value: !GetAtt DataAPI.ApiEndpoint
      Description: "API Gateway URL"


  LambdaAPIGWPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DataProcessorLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DataAPI}/*"

Outputs:
  ALB:
    Value: !GetAtt Loadbalancer.DNSName
